pragma solidity ^0.8.0;

contract ETHValidator {
    uint256 public constant rewardRate = 15;
    uint256 public constant carbonCreditRate = 1;
    uint256 public constant scalingFactor = 100;

    mapping(address => uint256) public carbonCredits;
    mapping(address => uint256) public stakeBalances;
    mapping(address => uint256) public lastUpdateTime;

    function stake() public payable {
        require(msg.value > 0, "Staking amount must be greater than 0");
        require(stakeBalances[msg.sender] == 0, "You already have an active stake");

        uint256 stakeAmount = msg.value;
        stakeBalances[msg.sender] = stakeAmount;
        lastUpdateTime[msg.sender] = block.timestamp;
    }

    function unstake() public {
        require(stakeBalances[msg.sender] > 0, "You do not have an active stake");

        uint256 stakeAmount = stakeBalances[msg.sender];
        uint256 carbonCreditsEarned = calculateCarbonCreditsEarned(msg.sender);
        carbonCredits[msg.sender] += carbonCreditsEarned;

        stakeBalances[msg.sender] = 0;
        lastUpdateTime[msg.sender] = 0;

        payable(msg.sender).transfer(stakeAmount + carbonCreditsEarned);
    }

    function calculateCarbonCreditsEarned(address validator) internal view returns (uint256) {
        uint256 elapsedTime = block.timestamp - lastUpdateTime[validator];
        uint256 carbonCreditsEarned = (stakeBalances[validator] * rewardRate * carbonCreditRate * elapsedTime) / scalingFactor;
        return carbonCreditsEarned;
    }

    function swapCarbonCreditsForETH(uint256 creditsToSwap) public {
        require(carbonCredits[msg.sender] >= creditsToSwap, "Not enough carbon credits to swap");

        uint256 ethToTransfer = creditsToSwap * carbonCreditRate;
        carbonCredits[msg.sender] -= creditsToSwap;

        payable(msg.sender).transfer(ethToTransfer);contract ETHValidator {
    uint256 public constant rewardRate = 15;
    uint256 public constant carbonCreditRate = 1;
    uint256 public constant scalingFactor = 100;

    mapping(address => uint256) public carbonCredits;
    mapping(address => uint256) public stakeBalances;
    mapping(address => uint256) public lastUpdateTime;

    function stake() public payable {
        require(msg.value > 0, "Staking amount must be greater than 0");
        require(stakeBalances[msg.sender] == 0, "You already have an active stake");

        uint256 stakeAmount = msg.value;
        stakeBalances[msg.sender] = stakeAmount;
        lastUpdateTime[msg.sender] = block.timestamp;
    }

    function unstake() public {
        require(stakeBalances[msg.sender] > 0, "You do not have an active stake");

        uint256 stakeAmount = stakeBalances[msg.sender];
        uint256 carbonCreditsEarned = calculateCarbonCreditsEarned(msg.sender);
        carbonCredits[msg.sender] += carbonCreditsEarned;

        stakeBalances[msg.sender] = 0;
        lastUpdateTime[msg.sender] = 0;

        payable(msg.sender).transfer(stakeAmount + carbonCreditsEarned);
    }

    function calculateCarbonCreditsEarned(address validator) internal view returns (uint256) {
        uint256 elapsedTime = block.timestamp - lastUpdateTime[validator];
        uint256 carbonCreditsEarned = (stakeBalances[validator] * rewardRate * carbonCreditRate * elapsedTime) / scalingFactor;
        return carbonCreditsEarned;
    }

    function swapCarbonCreditsForETH(uint256 creditsToSwap) public {
        require(carbonCredits[msg.sender] >= creditsToSwap, "Not enough carbon credits to swap");

        uint256 ethToTransfer = creditsToSwap * carbonCreditRate;
        carbonCredits[msg.sender] -= creditsToSwap;

        payable(msg.sender).transfer(ethToTransfer);
    }
}
